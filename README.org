#+title: Magix Linux stage4s build guide


This repo will contain the necessary files, steps, and dependencies required to make a stage4 that is compatible with Magix Linux. In theory any Gentoo stage3 or stage4 will work, with minimal to no changes, but this will also be a good starting point if you want to make your own (or if I forget how to make them, I can always come back)

* Requirements
A Linux-based distribution, PREFERABLY one with the *arch-chroot* in its repos, not a problem if there is none. Also do note that you *CAN ONLY* make stage4s for your computer architecture, or at least from my limited knowledge.


A stage3, that you can download from here : [[https://www.gentoo.org/downloads/][Downloads â€“ Gentoo Linux]]


And the most important thing is to have fun ^-^


* OpenRC vs SystemD

Here in Magix corp, we rarely judge you for your choice of software, and your init is no exception. Instructions for both openrc and systemd will be provided, and the differences will be highlighted. Keep in mind that everything can be tailored to your liking. So go wild!


* NoX11

NoX11 (or NoX) will refer to a stage4 without a DE or WM, just a tty and basic tools. This will logically be the smallest one, and fastest to make, as it will be similar to the base stage3. We will be using the non-desktop stage3 as a base because why not. Suffisant permissions are assumed here !

- *Step 1:* Extract stage3 to Build directory using ~tar xpvf path/to/stage3.tar.xz --xattrs-include='*.*' --numeric-owner Builddir~
- *Step 2:* *From now on, we will assume being inside the Builddir, unless otherwise mentioned:* ~cp --dereference /etc/resolv.conf etc/~
- *Step 3:* ~arch-chroot .~  or Ignore the warning, we know
- *Step 3 ALT:* if for some reason you cant use arch-chroot, use this
#+BEGIN_SRC bash
mount --types proc /proc proc
mount --rbind /sys sys
mount --make-rslave sys
mount --rbind /dev dev
mount --make-rslave dev
mount --bind /run run
mount --make-slave run
chroot . /bin/bash
#+END_SRC
- *Step 4:* ~source /etc/profile~
- *Step 5:* We now execute ~emerge-webrsync~ and select a profile from ~eselect profile list~ using ~eselect profile set <number>~ (in this case, default/linux/amd64/23.0 (stable))
- *Step 6:* Unless you want to use binpkgs for your stage4 (in which case, you can follow the Gentoo handbook on how to do it), remove the ~priority = 1~ line from /etc/portage/binrepos.conf/gentoobinhost.conf, as the install-backend will handle it manually depending on the user choice.
- *Step 7:* We add (temporarely) ~ACCEPT_LICENSE="*"~ ~MAKEOPTS="-jX -lY"~ to /etc/portage/make.conf , according to the Gentoo Handbook : For X :A good choice is the smaller of: the number of threads the CPU has, or the total amount of system RAM divided by 2 GiB. For Y : just X but slightly bigger, generally by 1
- *Step 8:* We also add some custom use flags, i will use networkmanager as an example here ~USE="networkmanager"~, you can also play around with other variables such as L10N, VIDEO_CARDS and others, but we will stick with the basics for now.
- *Step 9:* While we prefer an English stage4 by default, if something else is needed, check [[https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Base#Configure_locales][Installing the Gentoo base system - Gentoo wiki]]
- *Step 10:* Now we do a world update, this way the user wont end up with outdated packages upon installing, even if they refuse to update : ~emerge -avuDN @world~
- *Step 11:* We enable dracut and grub support for dist kernels by adding ~sys-kernel/installkernel dracut grub~ to ~/etc/portage/package.use/installkernel~
- *Step 12:* This is where editions WILL differ, so we will start with mandatory packages to install, and give examples of optional ones ^-^, ~emerge -aq app-portage/cpuid2cpuflags app-portage/gentoolkit app-admin/sudo sys-block/io-scheduler-udev-rules sys-kernel/dracut sys-fs/genfstab sys-kernel/installkernel sys-boot/grub~ If for whatever reason you want to use GRUB with an "exotic" target firmware , refer to this page [[https://wiki.gentoo.org/wiki/GRUB][GRUB - Gentoo wiki]] but for the most part, the defaults are good.
- *Step 13:ORC* Now for some optional packages that IMO should be added ^^ but without em, the installer will NOT break ~emerge -aq app-admin/sysklogd sys-process/cronie sys-apps/mlocate net-misc/chrony~ and we enable the services with ~rc-update add sysklogd default && rc-update add cronie default && rc-update add chronyd default~
- *Step 13:SYSD* In the case of systemd, most of these features are built in, so we need to only enable ~systemctl enable systemd-timesyncd.service~
- *Step 13:* For both systemd and openrc i suggest installing ~app-shells/bash-completion dev-vcs/git~ and anything else you deem fit, have fun here !!
- *Step 14:* using ~visudo~ we configure sudo to allow people from the wheel group to execute commands WITH a password. Uncomment this line ~%wheel ALL=(ALL:ALL) ALL~
